;;; m-mode.el --- M-mode for Acsl files
;; 
;; Filename: m-mode.el
;; Description: M-mode for Acsl files
;; Author: Matthew L. Fidler
;; Maintainer: Matthew L. Fidler
;; Created: Tue Jul 24 09:08:47 2012 (-0500)
;; Version: 0.01
;; Last-Updated: Wed Jul 25 17:58:11 2012 (-0500)
;;           By: Matthew L. Fidler
;;     Update #: 61
;; URL:
;; Keywords: 
;; Compatibility: 
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;;; Commentary: 
;; 
;; 
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;;; Change Log:
;; 
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;;; Code:

(require 'octave-mod nil t)
(require 'octave-mode nil t)
(add-to-list 'load-path
             (file-name-directory (or load-file-name buffer-file-name)))

;;;###autoload
(setq auto-mode-alist (append '(("\\.\\([Mm]\\)$" .
                                 m-mode-select)) auto-mode-alist))

(defun m-mode-select ()
  "Select if m-mode should run."
  (interactive)
  (let ((csl-files (directory-files (file-name-directory (buffer-file-name)) nil "\\.\\(csl\\|mc\\)$")))
    (if (not (= 0 (length csl-files)))
        (m-mode)
      (octave-mode))))

(defgroup m-mode nil
  "Major mode for editing AcslX m-source files."
  :group 'languages)

(defun m-build-builtin ()
  "Build Builtin from command reference manual."
  (interactive)
  (let ((dir "C:/Program Files/Aegis Technologies/acslX/Documentation/Online Help/Command Reference Manual")
        (builtin '())
        (props '())
        (case-fold-search nil)
        tmp)
    (mapc
     (lambda(file)
       (when (file-readable-p file)
         (message "%s" file)
         (with-temp-buffer
           (insert-file-contents file)
           (goto-char (point-min))
           (while (re-search-forward "<h[23] class=\"Heading[23]_inner\"><a name=\".*?\">\\(.*?\\)<" nil t)
             (setq tmp (match-string 1))
             (when (string-match " *$" tmp)
               (setq tmp (replace-match "" nil nil tmp)))
             (unless (string-match " " tmp)
               (unless (string-match "[A-Z]" tmp)
                 (unless (member tmp (append octave-text-functions
                                             octave-reserved-words))
                   (add-to-list 'builtin tmp)))))
           (goto-char (point-min))
           (while (re-search-forward "@[a-z]+" nil t)
             (add-to-list 'props (match-string 0))))))
     (directory-files dir t ".*html$"))
    (with-temp-file "./m-builtin.el"
      (insert ";;; This file is autogenerated.\n")
      (insert "(setq m-builtin '(")
      (mapc (lambda(keyword)
              (insert (format "\n%s\"%s\"" " " keyword)))
            builtin)
      (insert "))\n(setq m-props '(")
      (mapc (lambda(keyword)
              (insert (format "\n%s\"%s\"" " " keyword)))
            props)
      (insert "))\n(provide 'm-builtin)")
      (insert "\n;;; end of m-builtin.el\n")
      (emacs-lisp-mode)
      (indent-region (point-min) (point-max)))))

(require 'm-builtin)

(defun m-mode-@-font-lock (limit)
  "@ switch font-lock."
  (interactive (list (point-max)))
  (let ((case-fold-search t))
    (re-search-forward (eval-when-compile (format "%s\\>" (regexp-opt m-props 't))) limit t)))

(defvar m-font-lock-keywords nil
  "`m-mode' font-lock definitions, different from `octave-mode'.")

(unless m-font-lock-keywords
  (setq m-font-lock-keywords
        `((,(eval-when-compile (regexp-opt m-builtin 'words))
           (1 font-lock-builtin-face))
          (m-mode-@-font-lock
           (1 font-lock-keyword-face))
          ,@octave-font-lock-keywords)))

(defvar m-mode-map nil
  "`m-mode' keymap")
(setq m-mode-map nil)
(unless m-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map "\C-c\C-l" 'csl-mode-open-in-libero)
    (setq m-mode-map map)))

;;; Completions
(defun m-initialize-completions ()
  "Create an alist for Octave completions."
  (if m-completion-alist
      ()
    (setq m-completion-alist
          (append m-builtin
                  m-props
                  octave-reserved-words
                  octave-text-functions
                  octave-variables))))

(defun m-completion-at-point-function ()
  "Find the text to complete and the corresponding table."
  (let* ((beg (save-excursion (skip-syntax-backward "w_") (skip-chars-backward "@") (point)))
         (end (point)))
    (if (< beg (point))
        ;; Extend region past point, if applicable.
        (save-excursion (skip-syntax-forward "w_")
                        (setq end (point))))
    (list beg end m-completion-alist)))

(define-obsolete-function-alias 'm-complete-symbol
  'completion-at-point "24.1")

;;; Mode definition

(define-derived-mode m-mode octave-mode "M"
  "M-mode for editing Acsl m-files."
  (use-local-map m-mode-map)
  (m-initialize-completions)
  (set (make-local-variable 'font-lock-defaults)
       '(m-font-lock-keywords))
  (add-hook 'completion-at-point-functions
            'm-completion-at-point-function nil t))

(provide 'm-mode)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; m-mode.el ends here
